<library path="lib/liblwr_controllers">
    
  <class name="lwr_controllers/GravityCompensation" type="lwr_controllers::GravityCompensation" base_class_type="controller_interface::ControllerBase">
    <description>
      Safe gravity compensation.
    </description>
  </class>

  <class name="lwr_controllers/JointKinematicsTorq" type="lwr_controllers::JointKinematicsTorq" base_class_type="controller_interface::ControllerBase">
    <description>
      The JointImpedanceController tracks effort commands. It expects a EffortJointInterface type of hardware interface.
    </description>
  </class>

  <class name="lwr_controllers/KUKAJointStateController" type="lwr_controllers::KUKAJointStateController" base_class_type="controller_interface::ControllerBase">
    <description>
      The KUKAJointStateController is for publishing information such as ee_pos and joint pose on ros topics
    </description>
  </class>

  <class name="lwr_controllers/JointKinematiscImp" type="lwr_controllers::JointKinematiscImp" base_class_type="controller_interface::ControllerBase">
    <description>
      The KUKAJointStateController is for publishing information such as ee_pos and joint pose on ros topics
    </description>
  </class>


  <class name="lwr_controllers/JointPositionImpedanceController" type="lwr_controllers::JointPositionImpedanceController" base_class_type="controller_interface::ControllerBase">
    <description>
      The JointPositionImpedanceController tracks joint position commands. It expects a PositionJointInterface type of hardware interface.
    </description>
  </class>

  <class name="lwr_controllers/InverseDynamicsController" type="lwr_controllers::InverseDynamicsController" base_class_type="controller_interface::ControllerBase">
    <description>
      The InverseDynamicsController compensates for inertial, gravitational, and coriolis effects on a robot.
    </description>
  </class> 

  <class name="lwr_controllers/ComputedTorqueController" type="lwr_controllers::ComputedTorqueController" base_class_type="controller_interface::ControllerBase">
    <description>
      Info...
    </description>
  </class> 

  <class name="lwr_controllers/OneTaskInverseKinematics" type="lwr_controllers::OneTaskInverseKinematics" base_class_type="controller_interface::ControllerBase">
    <description>
      Info...
    </description>
  </class> 

  <class name="lwr_controllers/MultiTaskPriorityInverseKinematics" type="lwr_controllers::MultiTaskPriorityInverseKinematics" base_class_type="controller_interface::ControllerBase">
    <description>
      Info...
    </description>
  </class> 

  <class name="lwr_controllers/MultiTaskPriorityInverseDynamics" type="lwr_controllers::MultiTaskPriorityInverseDynamics" base_class_type="controller_interface::ControllerBase">
    <description>
      Info...
    </description>
  </class>   

  <class name="lwr_controllers/OneTaskInverseDynamicsJL" type="lwr_controllers::OneTaskInverseDynamicsJL" base_class_type="controller_interface::ControllerBase">
    <description>
      Info...
    </description>
  </class> 

  <class name="lwr_controllers/MinimumEffortInverseDynamics" type="lwr_controllers::MinimumEffortInverseDynamics" base_class_type="controller_interface::ControllerBase">
    <description>
      Info...
    </description>
  </class>

  <class name="lwr_controllers/BacksteppingController" type="lwr_controllers::BacksteppingController" base_class_type="controller_interface::ControllerBase">
    <description>
      Info...
    </description>
  </class>

  <class name="lwr_controllers/DynamicSlidingModeController" type="lwr_controllers::DynamicSlidingModeController" base_class_type="controller_interface::ControllerBase">
    <description>
      Info...
    </description>
  </class>

  <class name="lwr_controllers/DynamicSlidingModeControllerTaskSpace" type="lwr_controllers::DynamicSlidingModeControllerTaskSpace" base_class_type="controller_interface::ControllerBase">
    <description>
      Info...
    </description>
  </class>



</library>
